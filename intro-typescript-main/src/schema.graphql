# A schema is a collection of type definitions (hence "typeDefs") that together define the "shape" of queries that are
# executed against your data.
# Hash comments are discarded when the schema is compiled, quoted comments are not
type Query {
  # The query type is the type that actually facilitates all of the data retrieval in a GraphQL schema. It defines
  # what data can be queried.
  "Playlists hand-picked to be featured to all users."
  # Exclamation marks indicate the value cannot be null, and the array cannot be empty

  # Get all featured playlists
  featuredPlaylists: [Playlist!]!

  # Get a specific playlist, parens indicate an argument, and you can have several
  playlist(id: ID!): Playlist
}

"Full notation for a mutation. Mutations can receive args and return a payload"
type Mutation {
  addItemsToPlaylist(input: AddItemsToPlaylistInput!): AddItemsToPlaylistPayload!
}

type Playlist {
  # The ID of the playlist. Exclamation marks denote a required field
  id: ID!
  name: String!
  description: String
  tracks: [Track!]!
}

type Track {
  id: ID!
  name: String!
  durationMs: Int!
  explicit: Boolean!
  uri: String!
}

"Governs the response object"
type AddItemsToPlaylistPayload {
  "Similar to HTTP status code, shows the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlist that contains the newly added items"
  playlist: Playlist
}

"Inputs are a special kind of object type used to pass arguments to mutations. They are defined with the input keyword."
input AddItemsToPlaylistInput {
  "The ID of the playlist to add items to"
  playlistId: ID!
  "The URIs of the items to add to the playlist"
  uris: [String!]!
}
